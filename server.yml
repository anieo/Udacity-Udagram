Description: >
    Carlos Rivas / Udacity 2019

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
    InstanceType:
      Description: Ec2 istance type
      Type: String
      Default: t3.micro
      AllowedValues: [t3.nano,t3.micro,t3.small,t3.medium,t3.large]
    AMIId:
      Description: Ec2 AMI id
      Type: String
    KeyPair:
      Description: web server c2 KeyPair Name
      Type: String
    BaisonKeyPair:
      Description: web server c2 KeyPair Name
      Type: String
Resources:
  UdacityS3RoleEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        !Sub ${EnvironmentName}-Role-test
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: 
          - arn:aws:s3:::udacityudagram-346117284268
          - arn:aws:s3:::udacityudagram-346117284268/*
      Roles:
      - Ref: UdacityS3RoleEC2
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    DependsOn: UdacityS3RoleEC2
    Properties: 
      Roles:
        - Ref: UdacityS3RoleEC2
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: ProfileWithRolesForOurApp
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo apt install unzip -y
          sudo systemctl start apache2.service  
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          cd /var/www/html
          sudo chmod -R 2777 /var/www/html    
          aws s3 cp --recursive s3://udacityudagram-346117284268/anime-main/ .      
      # TODO: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: !Ref 'AMIId'
      # TODO: Change the key-pair name, as applicable to you. 
      # KeyName: !Ref 'KeyPair'
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  BastionInstance:
      Type: AWS::EC2::Instance
      Properties:
          ImageId: !Ref AMIId
          InstanceType: t3.micro
          # KeyName:  !Ref 'BaisonKeyPair'
          NetworkInterfaces:
              -   GroupSet:
                      - !Ref 'WebServerSecGroup'
                  AssociatePublicIpAddress: 'true'
                  DeviceIndex: '0'
                  DeleteOnTermination: 'true'
                  SubnetId:
                      Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
          UserData: !Base64
              Fn::Sub: "#!/bin/bash -xe\napt update -y\n"
          Tags:
              -   Key: Name
                  Value: !Sub '${EnvironmentName}-BASTION'

Outputs:
  
  LoadBalancerDNSName:
      Description: DNS name or Public URL of the Load Balancer
      Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
      Export:
          Name: !Sub ${EnvironmentName}-LB-DNSName
